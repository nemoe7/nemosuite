plugins {
    id 'dev.architectury.loom' version '1.11-SNAPSHOT' apply false
    id 'architectury-plugin' version '3.4-SNAPSHOT'
    id 'com.gradleup.shadow' version '8.3.6' apply false
}

architectury {
    minecraft = project.minecraft_version
}

allprojects {
    group = rootProject.maven_group
    version = rootProject.mod_version

    repositories {
        maven {
            name = 'ParchmentMC'
            url = 'https://maven.parchmentmc.org'
        }
    }
}

subprojects {
    apply plugin: 'dev.architectury.loom'
    apply plugin: 'architectury-plugin'
    apply plugin: 'maven-publish'

    base {
        // Set up a suffixed format for the mod jar names, e.g. `example-fabric`.
        archivesName = "$rootProject.archives_name-$project.name"
    }

    repositories {
    }

    dependencies {
        minecraft "net.minecraft:minecraft:$rootProject.minecraft_version"
        // mappings "net.fabricmc:yarn:$rootProject.yarn_mappings:v2"
        mappings loom.layered() {
            officialMojangMappings()
            parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.parchment_version}@zip")
        }
    }

    java {
        // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
        // if it is present.
        // If you remove this line, sources will not be generated.
        withSourcesJar()

        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    tasks.withType(JavaCompile).configureEach {
        it.options.release = 17
    }

    // Configure Maven publishing.
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifactId = base.archivesName.get()
                from components.java
            }
        }

        // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
        repositories {
            // Add repositories to publish to here.
            // Notice: This block does NOT have the same function as the block in the top level.
            // The repositories here will be used for publishing your artifact, not for
            // retrieving dependencies.
        }
    }
}

task collectJars {
  dependsOn ':fabric:build', ':forge:build'

  doLast {
    def dest = file("$buildDir/libs")
    dest.mkdirs()

    // Fabric
    fileTree(project(':fabric').buildDir.toPath().resolve('libs').toFile()).matching { include '*.jar' }.each { jar ->
        def destFile = new File(dest, jar.name)
        if(destFile.exists()) destFile.delete()
        jar.renameTo(destFile)
    }

    // Forge
    fileTree(project(':forge').buildDir.toPath().resolve('libs').toFile()).matching { include '*.jar' }.each { jar ->
        def destFile = new File(dest, jar.name)
        if(destFile.exists()) destFile.delete()
        jar.renameTo(destFile)
    }
    delete project(':fabric').buildDir
    delete project(':forge').buildDir
  }
}

task build {
  dependsOn ':fabric:build', ':forge:build', 'collectJars'
}
